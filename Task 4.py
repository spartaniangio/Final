# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EFj5MRt_lpj1SRGP5tYtO-XIAT-RNrYY
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import os
import cv2

(x_train_data, y_train_data), (x_test_data, y_test_data) = tf.keras.datasets.cifar10.load_data()

x_train_airplanes = x_train_data[np.where(y_train_data[:, 0] == 0)]
x_test_airplanes = x_test_data[np.where(y_test_data[:, 0] == 0)]

drone_images_list = []
drone_files = ['drone1.png', 'drone2.png', 'drone3.png', 'drone4.png']

for file in drone_files:
    if os.path.isfile(file):
        img = cv2.imread(file)
        img = cv2.resize(img, (32, 32))  # Resize all images to (32, 32)
        drone_images_list.append(img)
    else:
        print(f"Error: {file} not found.")
        break

if len(drone_images_list) == 4:
    drone_images = np.array(drone_images_list)
    x_train_combined = np.concatenate((x_train_airplanes, drone_images), axis=0)
    y_train_combined = np.concatenate((np.zeros(len(x_train_airplanes)), np.ones(len(drone_images))), axis=0)

    data_generator = ImageDataGenerator(
        rotation_range=30,
        width_shift_range=0.4,
        height_shift_range=0.4,
        shear_range=0.4,
        zoom_range=0.4,
        horizontal_flip=True
    )

    model = Sequential([
        Conv2D(36, (3, 3), activation='relu', input_shape=(32, 32, 3)),
        MaxPooling2D((2, 2)),
        Conv2D(72, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Flatten(),
        Dense(144, activation='relu'),
        Dense(1, activation='sigmoid')
    ])

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.fit(data_generator.flow(x_train_combined, y_train_combined, batch_size=32), epochs=28, validation_data=(x_test_airplanes, np.zeros(len(x_test_airplanes))))

    model.save('airplane_drone_classifier_v2.h5')
else:
    print("Error: All 4 drone images are not present.")